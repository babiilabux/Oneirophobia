{
  "version": 3,
  "sources": ["../../../dev/core/src/Actions/action.ts", "../../../dev/core/src/Actions/condition.ts", "../../../dev/core/src/Actions/directActions.ts", "../../../dev/core/src/Actions/actionManager.ts", "../../../dev/core/src/Actions/directAudioActions.ts", "../../../dev/core/src/Actions/interpolateValueAction.ts"],
  "sourcesContent": ["import { Observable } from \"../Misc/observable\";\r\nimport { Vector2, Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport type { Condition } from \"./condition\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { AbstractActionManager } from \"./abstractActionManager\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Material } from \"../Materials/material\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { ActionManager } from \"./actionManager\";\r\nimport type { ActionEvent } from \"./actionEvent\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Node } from \"../node\";\r\n\r\n/**\r\n * Interface used to define Action\r\n */\r\nexport interface IAction {\r\n    /**\r\n     * Trigger for the action\r\n     */\r\n    trigger: number;\r\n\r\n    /** Options of the trigger */\r\n    triggerOptions: any;\r\n\r\n    /**\r\n     * Gets the trigger parameters\r\n     * @returns the trigger parameters\r\n     */\r\n    getTriggerParameter(): any;\r\n\r\n    /**\r\n     * Internal only - executes current action event\r\n     * @internal\r\n     */\r\n    _executeCurrent(evt?: ActionEvent): void;\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @param parent of child\r\n     * @returns the serialized object\r\n     */\r\n    serialize(parent: any): any;\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    _prepare(): void;\r\n\r\n    /**\r\n     * Internal only - manager for action\r\n     * @internal\r\n     */\r\n    _actionManager: Nullable<AbstractActionManager>;\r\n\r\n    /**\r\n     * Adds action to chain of actions, may be a DoNothingAction\r\n     * @param action defines the next action to execute\r\n     * @returns The action passed in\r\n     * @see https://www.babylonjs-playground.com/#1T30HR#0\r\n     */\r\n    then(action: IAction): IAction;\r\n}\r\n\r\n/**\r\n * The action to be carried out following a trigger\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#available-actions\r\n */\r\nexport class Action implements IAction {\r\n    /**\r\n     * Trigger for the action\r\n     */\r\n    public trigger: number;\r\n\r\n    /**\r\n     * Internal only - manager for action\r\n     * @internal\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    private _nextActiveAction: Action;\r\n    private _child: Action;\r\n    private _condition?: Condition;\r\n    private _triggerParameter: any;\r\n\r\n    /**\r\n     * An event triggered prior to action being executed.\r\n     */\r\n    public onBeforeExecuteObservable = new Observable<Action>();\r\n\r\n    /**\r\n     * Creates a new Action\r\n     * @param triggerOptions the trigger, with or without parameters, for the action\r\n     * @param condition an optional determinant of action\r\n     */\r\n    constructor(\r\n        /** the trigger, with or without parameters, for the action */\r\n        public triggerOptions: any,\r\n        condition?: Condition\r\n    ) {\r\n        if (triggerOptions.parameter) {\r\n            this.trigger = triggerOptions.trigger;\r\n            this._triggerParameter = triggerOptions.parameter;\r\n        } else if (triggerOptions.trigger) {\r\n            this.trigger = triggerOptions.trigger;\r\n        } else {\r\n            this.trigger = triggerOptions;\r\n        }\r\n\r\n        this._nextActiveAction = this;\r\n        this._condition = condition;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    public _prepare(): void {}\r\n\r\n    /**\r\n     * Gets the trigger parameter\r\n     * @returns the trigger parameter\r\n     */\r\n    public getTriggerParameter(): any {\r\n        return this._triggerParameter;\r\n    }\r\n\r\n    /**\r\n     * Sets the trigger parameter\r\n     * @param value defines the new trigger parameter\r\n     */\r\n    public setTriggerParameter(value: any) {\r\n        this._triggerParameter = value;\r\n    }\r\n\r\n    /**\r\n     * Internal only - Returns if the current condition allows to run the action\r\n     * @internal\r\n     */\r\n    public _evaluateConditionForCurrentFrame(): boolean {\r\n        const condition = this._condition;\r\n        if (!condition) {\r\n            return true;\r\n        }\r\n\r\n        const currentRenderId = this._actionManager.getScene().getRenderId();\r\n\r\n        // We cache the current evaluation for the current frame\r\n        if (condition._evaluationId !== currentRenderId) {\r\n            condition._evaluationId = currentRenderId;\r\n            condition._currentResult = condition.isValid();\r\n        }\r\n\r\n        return condition._currentResult;\r\n    }\r\n\r\n    /**\r\n     * Internal only - executes current action event\r\n     * @internal\r\n     */\r\n    public _executeCurrent(evt?: ActionEvent): void {\r\n        const isConditionValid = this._evaluateConditionForCurrentFrame();\r\n        if (!isConditionValid) {\r\n            return;\r\n        }\r\n\r\n        this.onBeforeExecuteObservable.notifyObservers(this);\r\n        this._nextActiveAction.execute(evt);\r\n\r\n        this.skipToNextActiveAction();\r\n    }\r\n\r\n    /**\r\n     * Execute placeholder for child classes\r\n     * @param evt optional action event\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public execute(evt?: ActionEvent): void {}\r\n\r\n    /**\r\n     * Skips to next active action\r\n     */\r\n    public skipToNextActiveAction(): void {\r\n        if (this._nextActiveAction._child) {\r\n            if (!this._nextActiveAction._child._actionManager) {\r\n                this._nextActiveAction._child._actionManager = this._actionManager;\r\n            }\r\n\r\n            this._nextActiveAction = this._nextActiveAction._child;\r\n        } else {\r\n            this._nextActiveAction = this;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds action to chain of actions, may be a DoNothingAction\r\n     * @param action defines the next action to execute\r\n     * @returns The action passed in\r\n     * @see https://www.babylonjs-playground.com/#1T30HR#0\r\n     */\r\n    public then(action: Action): Action {\r\n        this._child = action;\r\n\r\n        action._actionManager = this._actionManager;\r\n        action._prepare();\r\n\r\n        return action;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    public _getProperty(propertyPath: string): string {\r\n        return this._actionManager._getProperty(propertyPath);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getEffectiveTarget(target: any, propertyPath: string): any {\r\n        return this._actionManager._getEffectiveTarget(target, propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @param parent of child\r\n     * @returns the serialized object\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public serialize(parent: any): any {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Internal only called by serialize\r\n     * @internal\r\n     */\r\n    protected _serialize(serializedAction: any, parent?: any): any {\r\n        const serializationObject: any = {\r\n            type: 1,\r\n            children: [],\r\n            name: serializedAction.name,\r\n            properties: serializedAction.properties || [],\r\n        };\r\n\r\n        // Serialize child\r\n        if (this._child) {\r\n            this._child.serialize(serializationObject);\r\n        }\r\n\r\n        // Check if \"this\" has a condition\r\n        if (this._condition) {\r\n            const serializedCondition = this._condition.serialize();\r\n            serializedCondition.children.push(serializationObject);\r\n\r\n            if (parent) {\r\n                parent.children.push(serializedCondition);\r\n            }\r\n            return serializedCondition;\r\n        }\r\n\r\n        if (parent) {\r\n            parent.children.push(serializationObject);\r\n        }\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    public static _SerializeValueAsString = (value: any): string => {\r\n        if (typeof value === \"number\") {\r\n            return value.toString();\r\n        }\r\n\r\n        if (typeof value === \"boolean\") {\r\n            return value ? \"true\" : \"false\";\r\n        }\r\n\r\n        if (value instanceof Vector2) {\r\n            return value.x + \", \" + value.y;\r\n        }\r\n        if (value instanceof Vector3) {\r\n            return value.x + \", \" + value.y + \", \" + value.z;\r\n        }\r\n\r\n        if (value instanceof Color3) {\r\n            return value.r + \", \" + value.g + \", \" + value.b;\r\n        }\r\n        if (value instanceof Color4) {\r\n            return value.r + \", \" + value.g + \", \" + value.b + \", \" + value.a;\r\n        }\r\n\r\n        return value; // string\r\n    };\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    public static _GetTargetProperty = (target: Scene | Node | Material) => {\r\n        return {\r\n            name: \"target\",\r\n            targetType: (<Mesh>target)._isMesh\r\n                ? \"MeshProperties\"\r\n                : (<Light>target)._isLight\r\n                  ? \"LightProperties\"\r\n                  : (<Camera>target)._isCamera\r\n                    ? \"CameraProperties\"\r\n                    : (<Material>target)._isMaterial\r\n                      ? \"MaterialProperties\"\r\n                      : \"SceneProperties\",\r\n            value: (<Scene>target)._isScene ? \"Scene\" : (<Node>target).name,\r\n        };\r\n    };\r\n}\r\n\r\nRegisterClass(\"BABYLON.Action\", Action);\r\n", "import { Action } from \"./action\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport type { ActionManager } from \"./actionManager\";\r\n\r\n/**\r\n * A Condition applied to an Action\r\n */\r\nexport class Condition {\r\n    /**\r\n     * Internal only - manager for action\r\n     * @internal\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _evaluationId: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _currentResult: boolean;\r\n\r\n    /**\r\n     * Creates a new Condition\r\n     * @param actionManager the manager of the action the condition is applied to\r\n     */\r\n    constructor(actionManager: ActionManager) {\r\n        this._actionManager = actionManager;\r\n    }\r\n\r\n    /**\r\n     * Check if the current condition is valid\r\n     * @returns a boolean\r\n     */\r\n    public isValid(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getProperty(propertyPath: string): string {\r\n        return this._actionManager._getProperty(propertyPath);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getEffectiveTarget(target: any, propertyPath: string): any {\r\n        return this._actionManager._getEffectiveTarget(target, propertyPath);\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _serialize(serializedCondition: any): any {\r\n        return {\r\n            type: 2, // Condition\r\n            children: [],\r\n            name: serializedCondition.name,\r\n            properties: serializedCondition.properties,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Defines specific conditional operators as extensions of Condition\r\n */\r\nexport class ValueCondition extends Condition {\r\n    private static _IsEqual = 0;\r\n    private static _IsDifferent = 1;\r\n    private static _IsGreater = 2;\r\n    private static _IsLesser = 3;\r\n\r\n    /**\r\n     * returns the number for IsEqual\r\n     */\r\n    public static get IsEqual(): number {\r\n        return ValueCondition._IsEqual;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsDifferent\r\n     */\r\n    public static get IsDifferent(): number {\r\n        return ValueCondition._IsDifferent;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsGreater\r\n     */\r\n    public static get IsGreater(): number {\r\n        return ValueCondition._IsGreater;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsLesser\r\n     */\r\n    public static get IsLesser(): number {\r\n        return ValueCondition._IsLesser;\r\n    }\r\n\r\n    /**\r\n     * Internal only The action manager for the condition\r\n     * @internal\r\n     */\r\n    public override _actionManager: ActionManager;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Creates a new ValueCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param target for the action\r\n     * @param propertyPath path to specify the property of the target the conditional operator uses\r\n     * @param value the value compared by the conditional operator against the current value of the property\r\n     * @param operator the conditional operator, default ValueCondition.IsEqual\r\n     */\r\n    constructor(\r\n        actionManager: ActionManager,\r\n        target: any,\r\n        /** path to specify the property of the target the conditional operator uses  */\r\n        public propertyPath: string,\r\n        /** the value compared by the conditional operator against the current value of the property */\r\n        public value: any,\r\n        /** [number] the conditional operator, default ValueCondition.IsEqual */\r\n        public operator: number = ValueCondition.IsEqual\r\n    ) {\r\n        super(actionManager);\r\n\r\n        this._target = target;\r\n        this._effectiveTarget = this._getEffectiveTarget(target, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Compares the given value with the property value for the specified conditional operator\r\n     * @returns the result of the comparison\r\n     */\r\n    public override isValid(): boolean {\r\n        switch (this.operator) {\r\n            case ValueCondition.IsGreater:\r\n                return this._effectiveTarget[this._property] > this.value;\r\n            case ValueCondition.IsLesser:\r\n                return this._effectiveTarget[this._property] < this.value;\r\n            case ValueCondition.IsEqual:\r\n            case ValueCondition.IsDifferent: {\r\n                let check: boolean;\r\n\r\n                if (this.value.equals) {\r\n                    check = this.value.equals(this._effectiveTarget[this._property]);\r\n                } else {\r\n                    check = this.value === this._effectiveTarget[this._property];\r\n                }\r\n                return this.operator === ValueCondition.IsEqual ? check : !check;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Serialize the ValueCondition into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public override serialize(): any {\r\n        return this._serialize({\r\n            name: \"ValueCondition\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"propertyPath\", value: this.propertyPath },\r\n                { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                { name: \"operator\", value: ValueCondition.GetOperatorName(this.operator) },\r\n            ],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the conditional operator for the ValueCondition\r\n     * @param operator the conditional operator\r\n     * @returns the name\r\n     */\r\n    public static GetOperatorName(operator: number): string {\r\n        switch (operator) {\r\n            case ValueCondition._IsEqual:\r\n                return \"IsEqual\";\r\n            case ValueCondition._IsDifferent:\r\n                return \"IsDifferent\";\r\n            case ValueCondition._IsGreater:\r\n                return \"IsGreater\";\r\n            case ValueCondition._IsLesser:\r\n                return \"IsLesser\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Defines a predicate condition as an extension of Condition\r\n */\r\nexport class PredicateCondition extends Condition {\r\n    /**\r\n     * Internal only - manager for action\r\n     * @internal\r\n     */\r\n    public override _actionManager: ActionManager;\r\n\r\n    /**\r\n     * Creates a new PredicateCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param predicate defines the predicate function used to validate the condition\r\n     */\r\n    constructor(\r\n        actionManager: ActionManager,\r\n        /** defines the predicate function used to validate the condition */\r\n        public predicate: () => boolean\r\n    ) {\r\n        super(actionManager);\r\n    }\r\n\r\n    /**\r\n     * @returns the validity of the predicate condition\r\n     */\r\n    public override isValid(): boolean {\r\n        return this.predicate();\r\n    }\r\n}\r\n\r\n/**\r\n * Defines a state condition as an extension of Condition\r\n */\r\nexport class StateCondition extends Condition {\r\n    /**\r\n     * Internal only - manager for action\r\n     * @internal\r\n     */\r\n    public override _actionManager: ActionManager;\r\n\r\n    private _target: any;\r\n\r\n    /**\r\n     * Creates a new StateCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param target of the condition\r\n     * @param value to compare with target state\r\n     */\r\n    constructor(\r\n        actionManager: ActionManager,\r\n        target: any,\r\n        /** Value to compare with target state  */\r\n        public value: string\r\n    ) {\r\n        super(actionManager);\r\n\r\n        this._target = target;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current condition is met\r\n     * @returns the validity of the state\r\n     */\r\n    public override isValid(): boolean {\r\n        return this._target.state === this.value;\r\n    }\r\n\r\n    /**\r\n     * Serialize the StateCondition into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public override serialize(): any {\r\n        return this._serialize({\r\n            name: \"StateCondition\",\r\n            properties: [Action._GetTargetProperty(this._target), { name: \"value\", value: this.value }],\r\n        });\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ValueCondition\", ValueCondition);\r\nRegisterClass(\"BABYLON.PredicateCondition\", PredicateCondition);\r\nRegisterClass(\"BABYLON.StateCondition\", StateCondition);\r\n", "import { Logger } from \"../Misc/logger\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Action } from \"./action\";\r\nimport type { Condition } from \"./condition\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport type { ActionEvent } from \"./actionEvent\";\r\n\r\n/**\r\n * This defines an action responsible to toggle a boolean once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class SwitchBooleanAction extends Action {\r\n    /**\r\n     * The path to the boolean property in the target object\r\n     */\r\n    public propertyPath: string;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the boolean\r\n     * @param propertyPath defines the path to the boolean property in the target object\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Execute the action toggle the boolean value.\r\n     */\r\n    public override execute(): void {\r\n        this._effectiveTarget[this._property] = !this._effectiveTarget[this._property];\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SwitchBooleanAction\",\r\n                properties: [Action._GetTargetProperty(this._target), { name: \"propertyPath\", value: this.propertyPath }],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set a the state field of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class SetStateAction extends Action {\r\n    /**\r\n     * The value to store in the state field.\r\n     */\r\n    public value: string;\r\n\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the state property\r\n     * @param value defines the value to store in the state field\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, value: string, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.value = value;\r\n        this._target = target;\r\n    }\r\n\r\n    /**\r\n     * Execute the action and store the value on the target state property.\r\n     */\r\n    public override execute(): void {\r\n        this._target.state = this.value;\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SetStateAction\",\r\n                properties: [Action._GetTargetProperty(this._target), { name: \"value\", value: this.value }],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set a property of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class SetValueAction extends Action {\r\n    /**\r\n     * The path of the property to set in the target.\r\n     */\r\n    public propertyPath: string;\r\n\r\n    /**\r\n     * The value to set in the property\r\n     */\r\n    public value: any;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the property\r\n     * @param propertyPath defines the path of the property to set in the target\r\n     * @param value defines the value to set in the property\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, value: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this.value = value;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Execute the action and set the targeted property to the desired value.\r\n     */\r\n    public override execute(): void {\r\n        this._effectiveTarget[this._property] = this.value;\r\n\r\n        if (this._target.markAsDirty) {\r\n            this._target.markAsDirty(this._property);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SetValueAction\",\r\n                properties: [\r\n                    Action._GetTargetProperty(this._target),\r\n                    { name: \"propertyPath\", value: this.propertyPath },\r\n                    { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                ],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to increment the target value\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class IncrementValueAction extends Action {\r\n    /**\r\n     * The path of the property to increment in the target.\r\n     */\r\n    public propertyPath: string;\r\n\r\n    /**\r\n     * The value we should increment the property by.\r\n     */\r\n    public value: any;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the property\r\n     * @param propertyPath defines the path of the property to increment in the target\r\n     * @param value defines the value value we should increment the property by\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, value: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this.value = value;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n\r\n        if (typeof this._effectiveTarget[this._property] !== \"number\") {\r\n            Logger.Warn(\"Warning: IncrementValueAction can only be used with number values\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute the action and increment the target of the value amount.\r\n     */\r\n    public override execute(): void {\r\n        this._effectiveTarget[this._property] += this.value;\r\n\r\n        if (this._target.markAsDirty) {\r\n            this._target.markAsDirty(this._property);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"IncrementValueAction\",\r\n                properties: [\r\n                    Action._GetTargetProperty(this._target),\r\n                    { name: \"propertyPath\", value: this.propertyPath },\r\n                    { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                ],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to start an animation once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class PlayAnimationAction extends Action {\r\n    /**\r\n     * Where the animation should start (animation frame)\r\n     */\r\n    public from: number;\r\n\r\n    /**\r\n     * Where the animation should stop (animation frame)\r\n     */\r\n    public to: number;\r\n\r\n    /**\r\n     * Define if the animation should loop or stop after the first play.\r\n     */\r\n    public loop?: boolean;\r\n\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target animation or animation name\r\n     * @param from defines from where the animation should start (animation frame)\r\n     * @param to defines where the animation should stop (animation frame)\r\n     * @param loop defines if the animation should loop or stop after the first play\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, from: number, to: number, loop?: boolean, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.from = from;\r\n        this.to = to;\r\n        this.loop = loop;\r\n        this._target = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and play the animation.\r\n     */\r\n    public override execute(): void {\r\n        const scene = this._actionManager.getScene();\r\n        scene.beginAnimation(this._target, this.from, this.to, this.loop);\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"PlayAnimationAction\",\r\n                properties: [\r\n                    Action._GetTargetProperty(this._target),\r\n                    { name: \"from\", value: String(this.from) },\r\n                    { name: \"to\", value: String(this.to) },\r\n                    { name: \"loop\", value: Action._SerializeValueAsString(this.loop) || false },\r\n                ],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to stop an animation once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class StopAnimationAction extends Action {\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target animation or animation name\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this._target = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and stop the animation.\r\n     */\r\n    public override execute(): void {\r\n        const scene = this._actionManager.getScene();\r\n        scene.stopAnimation(this._target);\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"StopAnimationAction\",\r\n                properties: [Action._GetTargetProperty(this._target)],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible that does nothing once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class DoNothingAction extends Action {\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any = Constants.ACTION_NothingTrigger, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n    }\r\n\r\n    /**\r\n     * Execute the action and do nothing.\r\n     */\r\n    public override execute(): void {}\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"DoNothingAction\",\r\n                properties: [],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to trigger several actions once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class CombineAction extends Action {\r\n    /**\r\n     * The list of aggregated animations to run.\r\n     */\r\n    public children: Action[];\r\n\r\n    /**\r\n     * defines if the children actions conditions should be check before execution\r\n     */\r\n    public enableChildrenConditions: boolean;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param children defines the list of aggregated animations to run\r\n     * @param condition defines the trigger related conditions\r\n     * @param enableChildrenConditions defines if the children actions conditions should be check before execution\r\n     */\r\n    constructor(triggerOptions: any, children: Action[], condition?: Condition, enableChildrenConditions = true) {\r\n        super(triggerOptions, condition);\r\n        this.children = children;\r\n        this.enableChildrenConditions = enableChildrenConditions;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepare(): void {\r\n        for (let index = 0; index < this.children.length; index++) {\r\n            this.children[index]._actionManager = this._actionManager;\r\n            this.children[index]._prepare();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute the action and executes all the aggregated actions.\r\n     * @param evt event to execute\r\n     */\r\n    public override execute(evt: ActionEvent): void {\r\n        for (const action of this.children) {\r\n            if (!this.enableChildrenConditions || action._evaluateConditionForCurrentFrame()) {\r\n                action.execute(evt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        const serializationObject = super._serialize(\r\n            {\r\n                name: \"CombineAction\",\r\n                properties: [],\r\n                combine: [],\r\n            },\r\n            parent\r\n        );\r\n\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            serializationObject.combine.push(this.children[i].serialize(null));\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to run code (external event) once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class ExecuteCodeAction extends Action {\r\n    /**\r\n     * The callback function to run.\r\n     */\r\n    public func: (evt: ActionEvent) => void;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param func defines the callback function to run\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, func: (evt: ActionEvent) => void, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.func = func;\r\n    }\r\n\r\n    /**\r\n     * Execute the action and run the attached code.\r\n     * @param evt event to execute\r\n     */\r\n    public override execute(evt: ActionEvent): void {\r\n        this.func(evt);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set the parent property of the target once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class SetParentAction extends Action {\r\n    private _parent: any;\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target containing the parent property\r\n     * @param parent defines from where the animation should start (animation frame)\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, parent: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this._target = target;\r\n        this._parent = parent;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and set the parent property.\r\n     */\r\n    public override execute(): void {\r\n        if (this._target.parent === this._parent) {\r\n            return;\r\n        }\r\n\r\n        const invertParentWorldMatrix = this._parent.getWorldMatrix().clone();\r\n        invertParentWorldMatrix.invert();\r\n\r\n        this._target.position = Vector3.TransformCoordinates(this._target.position, invertParentWorldMatrix);\r\n\r\n        this._target.parent = this._parent;\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SetParentAction\",\r\n                properties: [Action._GetTargetProperty(this._target), Action._GetTargetProperty(this._parent)],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SetParentAction\", SetParentAction);\r\nRegisterClass(\"BABYLON.ExecuteCodeAction\", ExecuteCodeAction);\r\nRegisterClass(\"BABYLON.DoNothingAction\", DoNothingAction);\r\nRegisterClass(\"BABYLON.StopAnimationAction\", StopAnimationAction);\r\nRegisterClass(\"BABYLON.PlayAnimationAction\", PlayAnimationAction);\r\nRegisterClass(\"BABYLON.IncrementValueAction\", IncrementValueAction);\r\nRegisterClass(\"BABYLON.SetValueAction\", SetValueAction);\r\nRegisterClass(\"BABYLON.SetStateAction\", SetStateAction);\r\nRegisterClass(\"BABYLON.SetParentAction\", SetParentAction);\r\nRegisterClass(\"BABYLON.SwitchBooleanAction\", SwitchBooleanAction);\r\nRegisterClass(\"BABYLON.CombineAction\", CombineAction);\r\n", "import type { Nullable } from \"../types\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3, Vector4 } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Condition, ValueCondition } from \"./condition\";\r\nimport type { IAction } from \"./action\";\r\nimport { Action } from \"./action\";\r\nimport { DoNothingAction } from \"./directActions\";\r\n\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { IActionEvent } from \"../Actions/actionEvent\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\nimport { AbstractActionManager } from \"./abstractActionManager\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Action Manager manages all events to be triggered on a given mesh or the global scene.\r\n * A single scene can have many Action Managers to handle predefined actions on specific meshes.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class ActionManager extends AbstractActionManager {\r\n    /**\r\n     * Nothing\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly NothingTrigger = Constants.ACTION_NothingTrigger;\r\n\r\n    /**\r\n     * On pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnPickTrigger = Constants.ACTION_OnPickTrigger;\r\n\r\n    /**\r\n     * On left pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnLeftPickTrigger = Constants.ACTION_OnLeftPickTrigger;\r\n\r\n    /**\r\n     * On right pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnRightPickTrigger = Constants.ACTION_OnRightPickTrigger;\r\n\r\n    /**\r\n     * On center pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnCenterPickTrigger = Constants.ACTION_OnCenterPickTrigger;\r\n\r\n    /**\r\n     * On pick down\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnPickDownTrigger = Constants.ACTION_OnPickDownTrigger;\r\n\r\n    /**\r\n     * On double pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnDoublePickTrigger = Constants.ACTION_OnDoublePickTrigger;\r\n\r\n    /**\r\n     * On pick up\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnPickUpTrigger = Constants.ACTION_OnPickUpTrigger;\r\n    /**\r\n     * On pick out.\r\n     * This trigger will only be raised if you also declared a OnPickDown\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnPickOutTrigger = Constants.ACTION_OnPickOutTrigger;\r\n\r\n    /**\r\n     * On long press\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnLongPressTrigger = Constants.ACTION_OnLongPressTrigger;\r\n\r\n    /**\r\n     * On pointer over\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnPointerOverTrigger = Constants.ACTION_OnPointerOverTrigger;\r\n\r\n    /**\r\n     * On pointer out\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnPointerOutTrigger = Constants.ACTION_OnPointerOutTrigger;\r\n\r\n    /**\r\n     * On every frame\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnEveryFrameTrigger = Constants.ACTION_OnEveryFrameTrigger;\r\n    /**\r\n     * On intersection enter\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnIntersectionEnterTrigger = Constants.ACTION_OnIntersectionEnterTrigger;\r\n\r\n    /**\r\n     * On intersection exit\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnIntersectionExitTrigger = Constants.ACTION_OnIntersectionExitTrigger;\r\n\r\n    /**\r\n     * On key down\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnKeyDownTrigger = Constants.ACTION_OnKeyDownTrigger;\r\n\r\n    /**\r\n     * On key up\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly OnKeyUpTrigger = Constants.ACTION_OnKeyUpTrigger;\r\n\r\n    // Members\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Creates a new action manager\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(scene?: Nullable<Scene>) {\r\n        super();\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n\r\n        scene.actionManagers.push(this);\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose(): void {\r\n        const sceneIndex = this._scene.actionManagers.indexOf(this);\r\n\r\n        for (let i = 0; i < this.actions.length; i++) {\r\n            const action = this.actions[i];\r\n            ActionManager.Triggers[action.trigger]--;\r\n            if (ActionManager.Triggers[action.trigger] === 0) {\r\n                delete ActionManager.Triggers[action.trigger];\r\n            }\r\n        }\r\n\r\n        this.actions.length = 0;\r\n\r\n        if (sceneIndex > -1) {\r\n            this._scene.actionManagers.splice(sceneIndex, 1);\r\n        }\r\n\r\n        const ownerMeshes = this._scene.meshes.filter((m) => m.actionManager === this);\r\n        for (const ownerMesh of ownerMeshes) {\r\n            ownerMesh.actionManager = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets hosting scene\r\n     * @returns the hosting scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers\r\n     * @param triggers defines the triggers to be tested\r\n     * @returns a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public hasSpecificTriggers(triggers: number[]): boolean {\r\n        for (let index = 0; index < this.actions.length; index++) {\r\n            const action = this.actions[index];\r\n\r\n            if (triggers.indexOf(action.trigger) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers. This function takes two arguments for\r\n     * speed.\r\n     * @param triggerA defines the trigger to be tested\r\n     * @param triggerB defines the trigger to be tested\r\n     * @returns a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public hasSpecificTriggers2(triggerA: number, triggerB: number): boolean {\r\n        for (let index = 0; index < this.actions.length; index++) {\r\n            const action = this.actions[index];\r\n\r\n            if (triggerA == action.trigger || triggerB == action.trigger) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does this action manager handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @param parameterPredicate defines an optional predicate to filter triggers by parameter\r\n     * @returns whether the trigger is handled\r\n     */\r\n    public hasSpecificTrigger(trigger: number, parameterPredicate?: (parameter: any) => boolean): boolean {\r\n        for (let index = 0; index < this.actions.length; index++) {\r\n            const action = this.actions[index];\r\n\r\n            if (action.trigger === trigger) {\r\n                if (parameterPredicate) {\r\n                    if (parameterPredicate(action.getTriggerParameter())) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does this action manager has pointer triggers\r\n     */\r\n    public get hasPointerTriggers(): boolean {\r\n        for (let index = 0; index < this.actions.length; index++) {\r\n            const action = this.actions[index];\r\n\r\n            if (action.trigger >= ActionManager.OnPickTrigger && action.trigger <= ActionManager.OnPointerOutTrigger) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does this action manager has pick triggers\r\n     */\r\n    public get hasPickTriggers(): boolean {\r\n        for (let index = 0; index < this.actions.length; index++) {\r\n            const action = this.actions[index];\r\n\r\n            if (action.trigger >= ActionManager.OnPickTrigger && action.trigger <= ActionManager.OnPickUpTrigger) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Registers an action to this action manager\r\n     * @param action defines the action to be registered\r\n     * @returns the action amended (prepared) after registration\r\n     */\r\n    public registerAction(action: IAction): Nullable<IAction> {\r\n        if (action.trigger === ActionManager.OnEveryFrameTrigger) {\r\n            if (this.getScene().actionManager !== this) {\r\n                Logger.Warn(\"OnEveryFrameTrigger can only be used with scene.actionManager\");\r\n                return null;\r\n            }\r\n        }\r\n\r\n        this.actions.push(action);\r\n        this.getScene()._registeredActions++;\r\n\r\n        if (ActionManager.Triggers[action.trigger]) {\r\n            ActionManager.Triggers[action.trigger]++;\r\n        } else {\r\n            ActionManager.Triggers[action.trigger] = 1;\r\n        }\r\n\r\n        action._actionManager = this;\r\n        action._prepare();\r\n\r\n        return action;\r\n    }\r\n\r\n    /**\r\n     * Unregisters an action to this action manager\r\n     * @param action defines the action to be unregistered\r\n     * @returns a boolean indicating whether the action has been unregistered\r\n     */\r\n    public unregisterAction(action: IAction): Boolean {\r\n        const index = this.actions.indexOf(action);\r\n        if (index !== -1) {\r\n            this.actions.splice(index, 1);\r\n            ActionManager.Triggers[action.trigger] -= 1;\r\n            if (ActionManager.Triggers[action.trigger] === 0) {\r\n                delete ActionManager.Triggers[action.trigger];\r\n            }\r\n            action._actionManager = null;\r\n            this.getScene()._registeredActions--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Process a specific trigger\r\n     * @param trigger defines the trigger to process\r\n     * @param evt defines the event details to be processed\r\n     */\r\n    public processTrigger(trigger: number, evt?: IActionEvent): void {\r\n        for (let index = 0; index < this.actions.length; index++) {\r\n            const action = this.actions[index];\r\n\r\n            if (action.trigger === trigger) {\r\n                if (evt) {\r\n                    if (trigger === ActionManager.OnKeyUpTrigger || trigger === ActionManager.OnKeyDownTrigger) {\r\n                        const parameter = action.getTriggerParameter();\r\n\r\n                        if (typeof parameter === \"function\") {\r\n                            if (!parameter(evt)) {\r\n                                continue;\r\n                            }\r\n                        } else if (parameter && parameter !== evt.sourceEvent.keyCode) {\r\n                            if (!parameter.toLowerCase) {\r\n                                continue;\r\n                            }\r\n                            const lowerCase = parameter.toLowerCase();\r\n\r\n                            if (lowerCase !== evt.sourceEvent.key) {\r\n                                const unicode = evt.sourceEvent.charCode ? evt.sourceEvent.charCode : evt.sourceEvent.keyCode;\r\n                                const actualkey = String.fromCharCode(unicode).toLowerCase();\r\n                                if (actualkey !== lowerCase) {\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                action._executeCurrent(evt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getEffectiveTarget(target: any, propertyPath: string): any {\r\n        const properties = propertyPath.split(\".\");\r\n\r\n        for (let index = 0; index < properties.length - 1; index++) {\r\n            target = target[properties[index]];\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getProperty(propertyPath: string): string {\r\n        const properties = propertyPath.split(\".\");\r\n\r\n        return properties[properties.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Serialize this manager to a JSON object\r\n     * @param name defines the property name to store this manager\r\n     * @returns a JSON representation of this manager\r\n     */\r\n    public serialize(name: string): any {\r\n        const root = {\r\n            children: new Array(),\r\n            name: name,\r\n            type: 3, // Root node\r\n            properties: new Array(), // Empty for root but required\r\n        };\r\n\r\n        for (let i = 0; i < this.actions.length; i++) {\r\n            const triggerObject = {\r\n                type: 0, // Trigger\r\n                children: new Array(),\r\n                name: ActionManager.GetTriggerName(this.actions[i].trigger),\r\n                properties: new Array(),\r\n            };\r\n\r\n            const triggerOptions = this.actions[i].triggerOptions;\r\n\r\n            if (triggerOptions && typeof triggerOptions !== \"number\") {\r\n                if (triggerOptions.parameter instanceof Node) {\r\n                    triggerObject.properties.push(Action._GetTargetProperty(triggerOptions.parameter));\r\n                } else if (typeof triggerOptions.parameter === \"object\") {\r\n                    const parameter = <any>{};\r\n                    DeepCopier.DeepCopy(triggerOptions.parameter, parameter, [\"mesh\"]);\r\n\r\n                    if (triggerOptions.parameter && triggerOptions.parameter.mesh) {\r\n                        parameter._meshId = triggerOptions.parameter.mesh.id;\r\n                    }\r\n\r\n                    triggerObject.properties.push({ name: \"parameter\", targetType: null, value: parameter });\r\n                } else {\r\n                    triggerObject.properties.push({ name: \"parameter\", targetType: null, value: triggerOptions.parameter });\r\n                }\r\n            }\r\n\r\n            // Serialize child action, recursively\r\n            this.actions[i].serialize(triggerObject);\r\n\r\n            // Add serialized trigger\r\n            root.children.push(triggerObject);\r\n        }\r\n\r\n        return root;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ActionManager from a JSON data\r\n     * @param parsedActions defines the JSON data to read from\r\n     * @param object defines the hosting mesh\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public static Parse(parsedActions: any, object: Nullable<AbstractMesh>, scene: Scene): void {\r\n        const actionManager = new ActionManager(scene);\r\n        if (object === null) {\r\n            scene.actionManager = actionManager;\r\n        } else {\r\n            object.actionManager = actionManager;\r\n        }\r\n\r\n        // instantiate a new object\r\n        const instantiate = (name: string, params: Array<any>): any => {\r\n            const internalClassType = GetClass(\"BABYLON.\" + name);\r\n            return internalClassType && new internalClassType(...params);\r\n        };\r\n\r\n        const parseParameter = (name: string, value: string, target: any, propertyPath: Nullable<string>): any => {\r\n            if (propertyPath === null) {\r\n                // String, boolean or float\r\n                const floatValue = parseFloat(value);\r\n\r\n                if (value === \"true\" || value === \"false\") {\r\n                    return value === \"true\";\r\n                } else {\r\n                    return isNaN(floatValue) ? value : floatValue;\r\n                }\r\n            }\r\n\r\n            const effectiveTarget = propertyPath.split(\".\");\r\n            const values = value.split(\",\");\r\n\r\n            // Get effective Target\r\n            for (let i = 0; i < effectiveTarget.length; i++) {\r\n                target = target[effectiveTarget[i]];\r\n            }\r\n\r\n            // Return appropriate value with its type\r\n            if (typeof target === \"boolean\") {\r\n                return values[0] === \"true\";\r\n            }\r\n\r\n            if (typeof target === \"string\") {\r\n                return values[0];\r\n            }\r\n\r\n            // Parameters with multiple values such as Vector3 etc.\r\n            const split: number[] = [];\r\n            for (let i = 0; i < values.length; i++) {\r\n                split.push(parseFloat(values[i]));\r\n            }\r\n\r\n            if (target instanceof Vector3) {\r\n                return Vector3.FromArray(split);\r\n            }\r\n\r\n            if (target instanceof Vector4) {\r\n                return Vector4.FromArray(split);\r\n            }\r\n\r\n            if (target instanceof Color3) {\r\n                return Color3.FromArray(split);\r\n            }\r\n\r\n            if (target instanceof Color4) {\r\n                return Color4.FromArray(split);\r\n            }\r\n\r\n            return parseFloat(values[0]);\r\n        };\r\n\r\n        // traverse graph per trigger\r\n        const traverse = (parsedAction: any, trigger: any, condition: Nullable<Condition>, action: Nullable<Action>, combineArray: Nullable<Array<Action>> = null) => {\r\n            if (parsedAction.detached) {\r\n                return;\r\n            }\r\n\r\n            const parameters: any[] = [];\r\n            let target: any = null;\r\n            let propertyPath: Nullable<string> = null;\r\n            const combine = parsedAction.combine && parsedAction.combine.length > 0;\r\n\r\n            // Parameters\r\n            if (parsedAction.type === 2) {\r\n                parameters.push(actionManager);\r\n            } else {\r\n                parameters.push(trigger);\r\n            }\r\n\r\n            if (combine) {\r\n                const actions: Action[] = [];\r\n                for (let j = 0; j < parsedAction.combine.length; j++) {\r\n                    traverse(parsedAction.combine[j], ActionManager.NothingTrigger, condition, action, actions);\r\n                }\r\n                parameters.push(actions);\r\n            } else {\r\n                for (let i = 0; i < parsedAction.properties.length; i++) {\r\n                    let value = parsedAction.properties[i].value;\r\n                    const name = parsedAction.properties[i].name;\r\n                    const targetType = parsedAction.properties[i].targetType;\r\n\r\n                    if (name === \"target\") {\r\n                        if (targetType === \"SceneProperties\") {\r\n                            value = target = scene;\r\n                        } else if (targetType === \"MaterialProperties\") {\r\n                            value = target = scene.getMaterialByName(value);\r\n                        } else {\r\n                            value = target = scene.getNodeByName(value);\r\n                        }\r\n                    } else if (name === \"parent\") {\r\n                        value = scene.getNodeByName(value);\r\n                    } else if (name === \"sound\") {\r\n                        // Can not externalize to component, so only checks for the presence off the API.\r\n                        if (scene.getSoundByName) {\r\n                            value = scene.getSoundByName(value);\r\n                        }\r\n                    } else if (name !== \"propertyPath\") {\r\n                        if (parsedAction.type === 2 && name === \"operator\") {\r\n                            value = (<any>ValueCondition)[value];\r\n                        } else {\r\n                            value = parseParameter(name, value, target, name === \"value\" ? propertyPath : null);\r\n                        }\r\n                    } else {\r\n                        propertyPath = value;\r\n                    }\r\n\r\n                    parameters.push(value);\r\n                }\r\n            }\r\n\r\n            if (combineArray === null) {\r\n                parameters.push(condition);\r\n            } else {\r\n                parameters.push(null);\r\n            }\r\n\r\n            // If interpolate value action\r\n            if (parsedAction.name === \"InterpolateValueAction\") {\r\n                const param = parameters[parameters.length - 2];\r\n                parameters[parameters.length - 1] = param;\r\n                parameters[parameters.length - 2] = condition;\r\n            }\r\n\r\n            // Action or condition(s) and not CombineAction\r\n            let newAction = instantiate(parsedAction.name, parameters);\r\n\r\n            if (newAction instanceof Condition && condition !== null) {\r\n                const nothing = new DoNothingAction(trigger, condition);\r\n\r\n                if (action) {\r\n                    action.then(nothing);\r\n                } else {\r\n                    actionManager.registerAction(nothing);\r\n                }\r\n\r\n                action = nothing;\r\n            }\r\n\r\n            if (combineArray === null) {\r\n                if (newAction instanceof Condition) {\r\n                    condition = newAction;\r\n                    newAction = action;\r\n                } else {\r\n                    condition = null;\r\n                    if (action) {\r\n                        action.then(newAction);\r\n                    } else {\r\n                        actionManager.registerAction(newAction);\r\n                    }\r\n                }\r\n            } else {\r\n                combineArray.push(newAction);\r\n            }\r\n\r\n            for (let i = 0; i < parsedAction.children.length; i++) {\r\n                traverse(parsedAction.children[i], trigger, condition, newAction, null);\r\n            }\r\n        };\r\n\r\n        // triggers\r\n        for (let i = 0; i < parsedActions.children.length; i++) {\r\n            let triggerParams: any;\r\n            const trigger = parsedActions.children[i];\r\n\r\n            if (trigger.properties.length > 0) {\r\n                const param = trigger.properties[0].value;\r\n                const value = trigger.properties[0].targetType === null ? param : scene.getMeshByName(param);\r\n\r\n                if (value._meshId) {\r\n                    value.mesh = scene.getMeshById(value._meshId);\r\n                }\r\n\r\n                triggerParams = { trigger: (<any>ActionManager)[trigger.name], parameter: value };\r\n            } else {\r\n                triggerParams = (<any>ActionManager)[trigger.name];\r\n            }\r\n\r\n            for (let j = 0; j < trigger.children.length; j++) {\r\n                if (!trigger.detached) {\r\n                    traverse(trigger.children[j], triggerParams, null, null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a trigger name by index\r\n     * @param trigger defines the trigger index\r\n     * @returns a trigger name\r\n     */\r\n    public static GetTriggerName(trigger: number): string {\r\n        switch (trigger) {\r\n            case Constants.ACTION_NothingTrigger:\r\n                return \"NothingTrigger\";\r\n            case Constants.ACTION_OnPickTrigger:\r\n                return \"OnPickTrigger\";\r\n            case Constants.ACTION_OnLeftPickTrigger:\r\n                return \"OnLeftPickTrigger\";\r\n            case Constants.ACTION_OnRightPickTrigger:\r\n                return \"OnRightPickTrigger\";\r\n            case Constants.ACTION_OnCenterPickTrigger:\r\n                return \"OnCenterPickTrigger\";\r\n            case Constants.ACTION_OnPickDownTrigger:\r\n                return \"OnPickDownTrigger\";\r\n            case Constants.ACTION_OnDoublePickTrigger:\r\n                return \"OnDoublePickTrigger\"; // start;\r\n            case Constants.ACTION_OnPickUpTrigger:\r\n                return \"OnPickUpTrigger\";\r\n            case Constants.ACTION_OnLongPressTrigger:\r\n                return \"OnLongPressTrigger\";\r\n            case Constants.ACTION_OnPointerOverTrigger:\r\n                return \"OnPointerOverTrigger\";\r\n            case Constants.ACTION_OnPointerOutTrigger:\r\n                return \"OnPointerOutTrigger\";\r\n            case Constants.ACTION_OnEveryFrameTrigger:\r\n                return \"OnEveryFrameTrigger\";\r\n            case Constants.ACTION_OnIntersectionEnterTrigger:\r\n                return \"OnIntersectionEnterTrigger\";\r\n            case Constants.ACTION_OnIntersectionExitTrigger:\r\n                return \"OnIntersectionExitTrigger\";\r\n            case Constants.ACTION_OnKeyDownTrigger:\r\n                return \"OnKeyDownTrigger\";\r\n            case Constants.ACTION_OnKeyUpTrigger:\r\n                return \"OnKeyUpTrigger\";\r\n            case Constants.ACTION_OnPickOutTrigger:\r\n                return \"OnPickOutTrigger\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n}\r\n", "import { Action } from \"./action\";\r\nimport type { Condition } from \"./condition\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { Sound } from \"../Audio/sound\";\r\n\r\n/**\r\n * This defines an action helpful to play a defined sound on a triggered action.\r\n */\r\nexport class PlaySoundAction extends Action {\r\n    private _sound: Sound;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param sound defines the sound to play\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, sound: Sound, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this._sound = sound;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and play the sound.\r\n     */\r\n    public override execute(): void {\r\n        if (this._sound !== undefined) {\r\n            this._sound.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"PlaySoundAction\",\r\n                properties: [{ name: \"sound\", value: this._sound.name }],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action helpful to stop a defined sound on a triggered action.\r\n */\r\nexport class StopSoundAction extends Action {\r\n    private _sound: Sound;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param sound defines the sound to stop\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, sound: Sound, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this._sound = sound;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and stop the sound.\r\n     */\r\n    public override execute(): void {\r\n        if (this._sound !== undefined) {\r\n            this._sound.stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"StopSoundAction\",\r\n                properties: [{ name: \"sound\", value: this._sound.name }],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PlaySoundAction\", PlaySoundAction);\r\nRegisterClass(\"BABYLON.StopSoundAction\", StopSoundAction);\r\n", "import { Action } from \"./action\";\r\nimport type { Condition } from \"./condition\";\r\n\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Vector3, Matrix, Quaternion } from \"../Maths/math.vector\";\r\nimport { Animation } from \"../Animations/animation\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * This defines an action responsible to change the value of a property\r\n * by interpolating between its current value and the newly set one once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class InterpolateValueAction extends Action {\r\n    /**\r\n     * Defines the path of the property where the value should be interpolated\r\n     */\r\n    public propertyPath: string;\r\n\r\n    /**\r\n     * Defines the target value at the end of the interpolation.\r\n     */\r\n    public value: any;\r\n\r\n    /**\r\n     * Defines the time it will take for the property to interpolate to the value.\r\n     */\r\n    public duration: number = 1000;\r\n\r\n    /**\r\n     * Defines if the other scene animations should be stopped when the action has been triggered\r\n     */\r\n    public stopOtherAnimations?: boolean;\r\n\r\n    /**\r\n     * Defines a callback raised once the interpolation animation has been done.\r\n     */\r\n    public onInterpolationDone?: () => void;\r\n\r\n    /**\r\n     * Observable triggered once the interpolation animation has been done.\r\n     */\r\n    public onInterpolationDoneObservable = new Observable<InterpolateValueAction>();\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the value to interpolate\r\n     * @param propertyPath defines the path to the property in the target object\r\n     * @param value defines the target value at the end of the interpolation\r\n     * @param duration defines the time it will take for the property to interpolate to the value.\r\n     * @param condition defines the trigger related conditions\r\n     * @param stopOtherAnimations defines if the other scene animations should be stopped when the action has been triggered\r\n     * @param onInterpolationDone defines a callback raised once the interpolation animation has been done\r\n     */\r\n    constructor(\r\n        triggerOptions: any,\r\n        target: any,\r\n        propertyPath: string,\r\n        value: any,\r\n        duration: number = 1000,\r\n        condition?: Condition,\r\n        stopOtherAnimations?: boolean,\r\n        onInterpolationDone?: () => void\r\n    ) {\r\n        super(triggerOptions, condition);\r\n\r\n        this.propertyPath = propertyPath;\r\n        this.value = value;\r\n        this.duration = duration;\r\n        this.stopOtherAnimations = stopOtherAnimations;\r\n        this.onInterpolationDone = onInterpolationDone;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Execute the action starts the value interpolation.\r\n     */\r\n    public override execute(): void {\r\n        const scene = this._actionManager.getScene();\r\n        const keys = [\r\n            {\r\n                frame: 0,\r\n                value: this._effectiveTarget[this._property],\r\n            },\r\n            {\r\n                frame: 100,\r\n                value: this.value,\r\n            },\r\n        ];\r\n\r\n        let dataType: number;\r\n\r\n        if (typeof this.value === \"number\") {\r\n            dataType = Animation.ANIMATIONTYPE_FLOAT;\r\n        } else if (this.value instanceof Color3) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR3;\r\n        } else if (this.value instanceof Vector3) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR3;\r\n        } else if (this.value instanceof Matrix) {\r\n            dataType = Animation.ANIMATIONTYPE_MATRIX;\r\n        } else if (this.value instanceof Quaternion) {\r\n            dataType = Animation.ANIMATIONTYPE_QUATERNION;\r\n        } else {\r\n            Logger.Warn(\"InterpolateValueAction: Unsupported type (\" + typeof this.value + \")\");\r\n            return;\r\n        }\r\n\r\n        const animation = new Animation(\"InterpolateValueAction\", this._property, 100 * (1000.0 / this.duration), dataType, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        animation.setKeys(keys);\r\n\r\n        if (this.stopOtherAnimations) {\r\n            scene.stopAnimation(this._effectiveTarget);\r\n        }\r\n\r\n        const wrapper = () => {\r\n            this.onInterpolationDoneObservable.notifyObservers(this);\r\n            if (this.onInterpolationDone) {\r\n                this.onInterpolationDone();\r\n            }\r\n        };\r\n\r\n        scene.beginDirectAnimation(this._effectiveTarget, [animation], 0, 100, false, 1, wrapper);\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"InterpolateValueAction\",\r\n                properties: [\r\n                    Action._GetTargetProperty(this._target),\r\n                    { name: \"propertyPath\", value: this.propertyPath },\r\n                    { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                    { name: \"duration\", value: Action._SerializeValueAsString(this.duration) },\r\n                    { name: \"stopOtherAnimations\", value: Action._SerializeValueAsString(this.stopOtherAnimations) || false },\r\n                ],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.InterpolateValueAction\", InterpolateValueAction);\r\n"],
  "mappings": "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",
  "names": []
}
