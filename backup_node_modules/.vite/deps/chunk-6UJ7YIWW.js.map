{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphCachedOperationBlock.ts"],
  "sourcesContent": ["import type { Nullable } from \"../../../types\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport type { RichType } from \"../../flowGraphRichTypes\";\r\n\r\nconst cacheName = \"cachedOperationValue\";\r\nconst cacheExecIdName = \"cachedExecutionId\";\r\n\r\n/**\r\n * A block that will cache the result of an operation and deliver it as an output.\r\n */\r\nexport abstract class FlowGraphCachedOperationBlock<OutputT> extends FlowGraphBlock {\r\n    /**\r\n     * The output of the operation\r\n     */\r\n    public readonly value: FlowGraphDataConnection<OutputT>;\r\n\r\n    constructor(outputRichType: RichType<OutputT>, config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.value = this.registerDataOutput(\"value\", outputRichType);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Operation to realize\r\n     * @param context the graph context\r\n     */\r\n    public abstract _doOperation(context: FlowGraphContext): OutputT;\r\n\r\n    public override _updateOutputs(context: FlowGraphContext) {\r\n        const cachedExecutionId = context._getExecutionVariable(this, cacheExecIdName, -1);\r\n        const cachedValue = context._getExecutionVariable<Nullable<OutputT>>(this, cacheName, null);\r\n        if (cachedValue !== undefined && cachedValue !== null && cachedExecutionId === context.executionId) {\r\n            this.value.setValue(cachedValue, context);\r\n        } else {\r\n            const calculatedValue = this._doOperation(context);\r\n            context._setExecutionVariable(this, cacheName, calculatedValue);\r\n            context._setExecutionVariable(this, cacheExecIdName, context.executionId);\r\n            this.value.setValue(calculatedValue, context);\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;AAOA,IAAM,YAAY;AAClB,IAAM,kBAAkB;AAKlB,IAAgB,gCAAhB,cAA+D,eAAc;EAM/E,YAAY,gBAAmC,QAAqC;AAChF,UAAM,MAAM;AAEZ,SAAK,QAAQ,KAAK,mBAAmB,SAAS,cAAc;EAChE;EASgB,eAAe,SAAyB;AACpD,UAAM,oBAAoB,QAAQ,sBAAsB,MAAM,iBAAiB,EAAE;AACjF,UAAM,cAAc,QAAQ,sBAAyC,MAAM,WAAW,IAAI;AAC1F,QAAI,gBAAgB,UAAa,gBAAgB,QAAQ,sBAAsB,QAAQ,aAAa;AAChG,WAAK,MAAM,SAAS,aAAa,OAAO;IAC5C,OAAO;AACH,YAAM,kBAAkB,KAAK,aAAa,OAAO;AACjD,cAAQ,sBAAsB,MAAM,WAAW,eAAe;AAC9D,cAAQ,sBAAsB,MAAM,iBAAiB,QAAQ,WAAW;AACxE,WAAK,MAAM,SAAS,iBAAiB,OAAO;IAChD;EACJ;;",
  "names": []
}
